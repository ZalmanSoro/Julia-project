// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/09/Square/SquareGame.jack

/**
 * The SquareDance class implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beggining, the square is located at the top left corner.
 * Use the arrow keys to move the square.
 * Use 'z' & 'x' to decrement & increment the size.
 * Use 'q' to quit.
 */
class SquareGame {

    // The square
    field Square square;
	field Maze maze;
	field int level;
	field int squareSize;
	field int life;
    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right
	field int stage;
	field boolean gameOver;
    /** Constructs a new Square Game. */
    constructor SquareGame new(int l){
		let stage = 1;
		let life = 3;
		let squareSize = 10;
		let maze = Maze.new(squareSize,4);
        let square = Square.new(0, 0, squareSize);
        let direction = 0;
		let level = l*l*l;
		let gameOver = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
		do Screen.clearScreen();
		do Output.moveCursor(13,26);
		do Output.printString("bye bye!");
		do Sys.wait(5000);
		do Screen.clearScreen();
		do square.dispose();
		do maze.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;
        let exit = false;

        while (~exit & ~gameOver) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
        }
		if (gameOver){
			while (~(key = 81)) {
					let key = Keyboard.keyPressed();
				}
		}
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method void moveSquare() {
		var int x,y;
        if (direction = 1) {
			let x = square.getX();	
			let y = square.getY() - 1;
			if(maze.isPixelClear(x,y)){
				do square.moveUp();
			}else{
				do fail();
			}			
        }
        if (direction = 2) {
			let x = square.getX();	
			let y = square.getY() + 1;
			if(maze.isPixelClear(x,y)){
				do square.moveDown();
			}else{
				do fail();
			}			
        }
        if (direction = 3) {
			let x = square.getX() - 1;	
			let y = square.getY();
			if(maze.isPixelClear(x,y)){
				do square.moveLeft();
			}else{
				do fail();
			}			
        }
        if (direction = 4) {
			let x = square.getX() + 1;	
			let y = square.getY();
			if(maze.isPixelClear(x,y)){
				do square.moveRight();
			}else{
				do fail();
			}			
        }
		if((x < 15) & (y + squareSize > 240 )){
			if(stage = 1){
				let stage = 2;
				do Screen.clearScreen();
				do Output.moveCursor(13,26);
				do Output.printString("STAGE 2");
				do Sys.wait(5000);
				do Screen.clearScreen();
				do maze.dispose();
				do square.dispose();
				let squareSize = 5;
				let life = 3;
				let square = Square.new(0, 0, squareSize);
				let maze = Maze.new(squareSize,8);				
			}else{
				do win();
			}

		}
        do Sys.wait(5*level); // Delays the next movement.
        return;
    }
	
	method void fail(){
		let direction = 0;
		
		let life = life - 1;
		if(life = 0){
			do Screen.clearScreen();
			do Screen.drawCircle(256,128,100);
			do Output.moveCursor(12,28);
			do Output.printString("You Lost!");
			let gameOver = true;
		}else{
			do Output.moveCursor(13,26);
			do Output.printString("Life remained : ");
			do Output.printInt(life);
		}
		return;
	}
	method void win(){
		let direction = 0;
		do Screen.clearScreen();
		do Screen.drawCircle(256,128,100);
		do Output.moveCursor(12,28);
		do Output.printString("You WON !!!");
		let gameOver = true;
		return;
	}

}
