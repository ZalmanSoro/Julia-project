class Maze {
	field int size, len ,lines, squareSize;
	constructor Maze new(int ss, int l){
		var int i;
		var boolean even;
		let size = 256/(l*2);
		let squareSize = ss;
		let i = 0;
		let len = 450;
		let lines = l;
		let even = false; 
		while(i < lines){
			if(even){
				do Screen.drawRectangle(0,2*i*size,len,(2*i + 1)*size);
			}else{
				do Screen.drawRectangle(512-len,2*i*size,511,(2*i + 1)*size);
			}
			let i = i + 1;
			let even = ~even; 
		}
		do Screen.drawCircle(size/2 ,255-(size/2),size/4);
		
		return this;
	}
	
	method boolean isPixelClear(int x, int y){
		var int i,left,right,top,bottom,temp;
		var boolean even;
		let i = 0;
		let even = false; 
		while(i < lines){
			let temp = (2*i + 1);
			let top = 2*i*size;
			let bottom = temp*size;
			if(even){
				let left = 0;
				let right = len;
			}else{
				let left = 512-len;
				let right = 511;			
			}
			//top left
				if((x > left) & (x < right) & (y < bottom) & (y > top)){
					return false;
				}
				//top right
				if((x + squareSize > left) & (x + squareSize < right) & (y < bottom) & (y > top)){
					return false;
				}
				//bottom left
				if((x  > left) & (x < right) & (y + squareSize < bottom) & (y + squareSize > top)){
					return false;
				}
				//bottom right
				if((x + squareSize > left) & (x + squareSize < right) & (y + squareSize < bottom) & (y + squareSize > top)){
					return false;
				}
			let i = i + 1;
			let even = ~even; 
		}
		return true;
	}
	
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}